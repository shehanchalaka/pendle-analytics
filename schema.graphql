type Token @entity {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigDecimal!

  expiry: BigInt!
  forgeId: String!
  underlyingToken: Token

  type: String!
  market: Market
}

type Forge @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  forgeId: String!
}

type YieldContract @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!

  forgeId: String!
  expiry: BigInt!

  underlyingToken: Token!
  yieldBearingToken: Token!
  ot: Token!
  yt: Token!

  mintedVolume: BigDecimal!
  mintedVolumeUSD: BigDecimal!
  mintCount: BigInt!

  redeemedVolume: BigDecimal!
  redeemedVolumeUSD: BigDecimal!
  redeemCount: BigInt!

  lockedVolume: BigDecimal!
  lockedVolumeUSD: BigDecimal!
}

type Market @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  type: String!
  token0: Token!
  token1: Token!
  baseToken: Token!
  quoteToken: Token!
  expiry: BigInt!
  name: String!
  swapCount: BigInt!
}

type Transaction @entity {
  id: ID!
  hash: String!
  block: BigInt!
  timestamp: BigInt!
  market: Market
  yieldContract: YieldContract
  user: User!
  action: String!
  inputs: [TokenAmount!]!
  outputs: [TokenAmount!]!
  amountUSD: BigDecimal!
}

type User @entity {
  id: ID!

  transactions: [Transaction!]! @derivedFrom(field: "user")
}

type MarketData @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  market: Market
  impliedYield: BigDecimal!
}

type TokenAmount @entity {
  id: ID!
  token: Token!
  amount: BigDecimal!
  amountUSD: BigDecimal!
}

type DebugLog @entity {
  id: ID!
  nextId: String!
  message: String!
}
